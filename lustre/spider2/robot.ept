open Lib

fun mux(x : bool ; y, z : float) returns (r : float);
let
    r = if x then y else z;
tel

fun sgn(x : float) returns (r : float);
let 
    r = if x >. 0.0 then 1.0 else (if x <. 0.0 then -.1.0 else 0.0);
tel

fun mod2(x : float; y : float) returns (r : float);
var x2 : float;
let
    x2 = fmod(x,y);
    r = if 2.0 *. x2 <=. y then x2 else x2 -. y;
tel
    

fun setMotor(current2 : float; goal2 : float ; maxi : float) returns (power : float);
var delta : float; delta2 : float; current : float; goal : float;
let 
    current = mod2(current2, 360.0);
    goal = mod2(goal2, 360.0);

    delta = goal -. current;
    delta2 = if abs(delta) <=. 1.0 then 0.0 else delta;

    power = if delta >=. 0.0 then min(abs(delta2),maxi) else -.min(abs(delta2), maxi);
tel

fun setMotorFast(current : float; goal : float ; maxi : float) returns (power : float);
var delta : float;
let 
    delta = fmod(goal -. current, 360.0);
    power = if delta <. 180.0 then maxi else -.maxi;
tel
node setMotorPID(
    currentAngle: float; 
    goalAngle: float; 
    maxSpeed: float; 
    kp: float; 
    ki: float; 
    kd: float;
) returns (motorSpeed: float);
var
    error: float;
    integral: float;
    derivative: float;
    lastError: float;
    rawSpeed: float;
let
    (*error1 = fmod(goalAngle -. currentAngle,360.0);
    error2 = if error1 <=. 180.0 then error1 else error1 -. 360.0;*)
    error = mod2(goalAngle -. currentAngle, 360.0);
    integral = 0.0 -> pre integral +. error;
    derivative = 0.0 -> (error -. pre lastError);
    rawSpeed = (kp *. error) +. (ki *. integral) +. (kd *. derivative);
    motorSpeed = if rawSpeed >. maxSpeed then maxSpeed 
                 else if rawSpeed <. -.maxSpeed then -.maxSpeed 
                 else if abs(rawSpeed) <. 1.0 then 0.0
                 else rawSpeed;
    lastError = error;
tel


fun doNotMove(limit, speedA, speedB, speedC, speedD : float) returns (ok : bool);
let
    ok = (speedA <=. limit) and (speedB <=. limit) and (speedC <=. limit) and (speedD <=. limit);
tel

node setMotorArm(arm1angle, arm2angle, arm3angle, arm4angle, arm1goal, arm2goal, arm3goal, arm4goal : float) returns (arm1speed, arm2speed, arm3speed, arm4speed : float);
let
    arm1speed = setMotorPID(arm1angle, fmod(arm1goal,360.0), 20.0, 0.5, 0.0, 0.2);
    arm2speed = setMotorPID(arm2angle, fmod(arm2goal,360.0), 20.0, 0.7, 0.0, 0.3);
    arm3speed = setMotorPID(arm3angle, fmod(arm3goal,360.0), 20.0, 0.9, 0.0, 0.4);
    arm4speed = setMotorPID(arm4angle, fmod(arm4goal,360.0), 20.0, 1.0, 0.0, 0.5);
tel

node setMotorLegs(hipLangle, hipRangle, kneeLangle, kneeRangle, hipLgoal, hipRgoal, kneeLgoal, kneeRgoal : float) returns (hipLspeed, hipRspeed, kneeLspeed, kneeRspeed : float);
let
    hipLspeed = setMotor(hipLangle, hipLgoal, 60.0);
    hipRspeed = setMotor(hipRangle, hipRgoal, 60.0);
    kneeLspeed = setMotor(kneeLangle, kneeLgoal, 60.0);
    kneeRspeed = setMotor(kneeRangle, kneeRgoal, 60.0);
tel

fun funHip(x : float) returns (y : float)
var x2: float;
let
    x2 = clamp(x,0.0,2.0); 
    y = if x2 <=. 1.0 then
            -.x2 *. 80.0
        else
            160.0 *. x2 -. 240.0;
tel
fun funKnee(x : float) returns (y : float)
var x2: float;
let
    x2 = clamp(x,0.0,2.0); 
    y = if x2 <=. 1.0 then
            160.0 *. x2
        else
            -.150.0 *. x2 +. 310.0;
tel

node legSpeedsWithoutContact(hipAngle : float; kneeAngle : float; hipGoal : float ; kneeGoal : float; footContact : bool ; calfDistance : float) returns (hipSpeed : float; kneeSpeed : float);
var kneeSpeed2 : float;
let
    hipSpeed = setMotor(hipAngle, hipGoal, 60.0);
    kneeSpeed2 = setMotor(kneeAngle, kneeGoal, 60.0);
    kneeSpeed = if (footContact or calfDistance <=. 0.20) and abs(hipSpeed) >=. 1.0 then 0.0 else kneeSpeed2;
tel

node legSpeedsWithContact(hipAngle : float; kneeAngle : float; hipGoal : float ; kneeGoal : float; footContact : bool ; calfDistance : float) returns (hipSpeed : float; kneeSpeed : float);
var hipSpeed2 : float;
let
    hipSpeed2 = setMotor(hipAngle, hipGoal, 60.0);
    kneeSpeed = setMotor(kneeAngle, kneeGoal, 60.0);
    hipSpeed = if (not footContact) and abs(kneeSpeed) >=. 1.0 then 0.0 else hipSpeed2;
tel


node robot(dt : float;
           hipLangle : float;
           hipRangle : float;
           kneeLangle : float;
           kneeRangle : float;
           arm1angle : float;
           arm2angle : float;
           arm3angle : float;
           arm4angle : float;
           fingerL1angle : float;
           fingerL2angle : float;
           fingerR1angle : float;
           fingerR2angle : float;
           gyroscope : float;
           calfLdistance : float;
           calfRdistance : float;
           bodyDistance : float;
           footLcontact : bool;
           footRcontact : bool;
           bodyContact : bool;
           main_x : float;
           main_y : float;
           secondary_x : float;
           secondary_y : float;
           action_a : bool;
           action_x : bool;
           action_b : bool;
           action_lb : bool;
           action_rb : bool;
)
returns (  hipLspeed : float;
           hipRspeed : float;
           kneeLspeed : float;
           kneeRspeed : float;
           arm1speed : float;
           arm2speed : float;
           arm3speed : float;
           arm4speed : float;
           fingerL1speed : float;
           fingerL2speed : float;
           fingerR1speed : float;
           fingerR2speed : float;
           arm_target_x : float;
           arm_target_y : float;
           arm_target_angle : float;
);
var dgyroscope : float; body_target_y : float; alti : float;
let
    dgyroscope = 100.0 -> abs(fmod(gyroscope -. pre gyroscope, 360.0)) /. dt;
    alti = bodyDistance; (* TODO  take the gyroscope into accout *)

    arm_target_x = clamp(   0.0 -> pre arm_target_x +. (secondary_x *. dt *. 0.5) , -.1.0, 1.0);
    arm_target_y = clamp(   0.2 -> pre arm_target_y +. (secondary_y *. dt *. 0.5) , 0.25, 1.0);
    body_target_y = clamp(  0.7 -> pre body_target_y +. (main_y *. dt *. 0.5), 0.0, 2.0);
    arm_target_angle = 0.0 -> fmod( pre arm_target_angle +. ( mux(action_lb, 1.0, 0.0) +. mux(action_rb, -.1.0, 0.0)) *. dt *. 10.0 , 360.0);
    
    automaton
        state Hand_Open
            do
                fingerL1speed = setMotor(fingerL1angle, 80.0, 1000.0);
                fingerL2speed = setMotor(fingerL2angle, 300.0, 1000.0);
                fingerR1speed = setMotor(fingerR1angle, -.80.0, 1000.0);
                fingerR2speed = setMotor(fingerR2angle, -.300.0, 1000.0);
            until false -> (not pre action_x) and action_x then Hand_Close
        state Hand_Close
            do
                fingerL1speed = setMotor(fingerL1angle, 20.0, 1000.0);
                fingerL2speed = setMotor(fingerL2angle, 300.0, 1000.0);
                fingerR1speed = setMotor(fingerR1angle, -.20.0, 1000.0);
                fingerR2speed = setMotor(fingerR2angle, -.300.0, 1000.0);
            until false -> (not pre action_x) and action_x then Hand_Open
    end;

    (* This first automaton is used when you need to control the legs and the arm at the same time *)
    automaton
        state Falling
            do
                (hipLspeed, hipRspeed, kneeLspeed, kneeRspeed) =
                    setMotorLegs(hipLangle, hipRangle, kneeLangle, kneeRangle, -.40.0, 40.0, 100.0, -.100.0);
                (arm1speed, arm2speed, arm3speed, arm4speed) =
                    setMotorArm(arm1angle, arm2angle, arm3angle, arm4angle, 320.0, 30.0 , 80.0, 60.0);

            until footLcontact or footRcontact or bodyContact then Standard

        state Upside_Down_Init
            var isStatic : bool;
            do
                (hipLspeed, hipRspeed, kneeLspeed, kneeRspeed) =
                    setMotorLegs(hipLangle, hipRangle, kneeLangle, kneeRangle, -.40.0, 40.0, 100.0, -.100.0);
 
                (arm1speed, arm2speed, arm3speed, arm4speed) =
                    setMotorArm(arm1angle, arm2angle, arm3angle, arm4angle, 0.0, 0.0 , 0.0, 0.0);

                isStatic = doNotMove(1.0, hipLspeed, hipRspeed, kneeLspeed, kneeRspeed) and doNotMove(1.0, arm1speed, arm2speed, arm3speed, arm4speed) ;
                until gyroscope <=. 40.0 or gyroscope >=. 320.0 then Standard
                    | isStatic and gyroscope >=. 180.0 and gyroscope <. 320.0 then Upside_Down_Left
                    | isStatic and gyroscope <. 180.0  and gyroscope >. 40.0 then Upside_Down_Right

        state Upside_Down_Left
            var time : float;
            do
                time = 0.0 -> pre time +. dt;

                (hipLspeed, hipRspeed, kneeLspeed, kneeRspeed) =
                    setMotorLegs(hipLangle, hipRangle, kneeLangle, kneeRangle, 60.0, 40.0, 40.0, -.100.0);
 
                (arm1speed, arm2speed, arm3speed, arm4speed) =
                    setMotorArm(arm1angle, arm2angle, arm3angle, arm4angle, -.65.0, -.0.0 , -.10.0, -.30.0);
                
                until gyroscope <=. 40.0 or gyroscope >=. 320.0 then Standard
                    | doNotMove(0.1, arm1speed, arm2speed, arm3speed, arm4speed) and arm1angle <=. -.20.0 and dgyroscope <=. 1.0 and time >=. 5.0 then Upside_Down_Right

        state Upside_Down_Right
            var time : float;
            do
                time = 0.0 -> pre time +. dt;

                (hipLspeed, hipRspeed, kneeLspeed, kneeRspeed) =
                    setMotorLegs(hipLangle, hipRangle, kneeLangle, kneeRangle, -.40.0, -.60.0, 100.0, -.40.0);
 
                (arm1speed, arm2speed, arm3speed, arm4speed) =
                    setMotorArm(arm1angle, arm2angle, arm3angle, arm4angle, 65.0, 0.0 , 10.0, 30.0);

                until gyroscope <=. 40.0 or gyroscope >=. 320.0 then Standard
                    | doNotMove(0.1, arm1speed, arm2speed, arm3speed, arm4speed) and arm1angle >=. 20.0 and dgyroscope <=. 1.0 and time >=. 5.0 then Upside_Down_Left

        state Jump
            do
                hipLspeed = setMotorFast(hipLangle, 90.0, 300.0);
                hipRspeed = setMotorFast(hipRangle, -.90.0, 300.0);
                kneeLspeed = setMotorFast(kneeLangle +. hipLangle +. gyroscope, 90.0, 300.0);
                kneeRspeed = setMotorFast(kneeRangle +. hipRangle +. gyroscope, -.90.0, 300.0);
                (arm1speed, arm2speed, arm3speed, arm4speed) =
                    setMotorArm(arm1angle, arm2angle, arm3angle, arm4angle, -.10.0, 10.0 , -.10.0, 10.0);

            until not footLcontact and not footRcontact then Falling


        state Standard
            do
                (* control the legs *)
                automaton
                    
                    state Center
                        var factor : float;
                        do
                            factor = body_target_y;
                            
                            (hipLspeed, hipRspeed, kneeLspeed, kneeRspeed) =
                                 setMotorLegs(hipLangle, hipRangle, kneeLangle, kneeRangle, funHip(factor), -.funHip(factor), funKnee(factor), -.funKnee(factor));
                        until abs(main_x) >=. 0.8 then Go_Down
                    state Go_Down
                        var finished : bool;
                        do
                            (hipLspeed, hipRspeed, kneeLspeed, kneeRspeed) =
                                 setMotorLegs(hipLangle, hipRangle, kneeLangle, kneeRangle, 310.0, -.310.0, 340.0, 20.0);
                        
                        finished = bodyContact and hipLangle >=. 180.0 and hipRangle <=. 180.0 and kneeLangle >=. 180.0 and kneeRangle <=. 180.0;
                        until finished and abs(main_x) >=. 0.8 then Go_Off_Center_Down
                            | finished and abs(main_x) <=. 0.8 then Center
                    state Go_Off_Center_Down
                        var factorL : float; factorR : float; hipOk : bool;
                        do
                            factorL = if main_x >=. 0.0 then 1.0 else 0.1;
                            factorR = if main_x >=. 0.0 then 0.1 else 1.0;
                            (hipLspeed,kneeLspeed) = legSpeedsWithoutContact(hipLangle, kneeLangle, funHip(factorL), funKnee(factorL), footLcontact, calfLdistance);
                            (hipRspeed,kneeRspeed) = legSpeedsWithoutContact(hipRangle, kneeRangle, -.funHip(factorR), -.funKnee(factorR), footRcontact, calfRdistance);
                            hipOk = if main_x >=. 0.1 then (hipLangle >=. 180.0 and hipLangle <=. 330.0) else (hipRangle <=. 180.0 and hipRangle >=. 30.0);
                        until footLcontact and footRcontact and hipOk then Go_Off_Center_Up
                            | abs(main_x) <=. 0.8 then Center
                    state Go_Off_Center_Up
                        var factorL : float; factorR : float; kneeLspeed2 : float; hipRspeed2 : float; kneeRspeed2 : float; hipLspeed2 : float;
                        do
                            factorL = if main_x >=. 0.0 then 0.2 else 1.0;
                            factorR = if main_x >=. 0.0 then 1.0 else 0.2;
                            (hipLspeed2,kneeLspeed2) = legSpeedsWithContact(hipLangle, kneeLangle, funHip(factorL), funKnee(factorL), footLcontact, calfLdistance);
                            (hipRspeed2,kneeRspeed2) = legSpeedsWithContact(hipRangle, kneeRangle, -.funHip(factorR), -.funKnee(factorR), footRcontact, calfRdistance);
                            kneeLspeed = if main_x >. 0.0 then 0.5 *. kneeLspeed2 else kneeLspeed2;
                            kneeRspeed = if main_x <. 0.0 then 0.5 *. kneeRspeed2 else kneeRspeed2;
                            hipLspeed = if main_x <. 0.0 then 0.5 *. hipLspeed2 else hipLspeed2;
                            hipRspeed = if main_x >. 0.0 then 0.5 *. hipRspeed2 else hipRspeed2;

                            until doNotMove(5.0, hipLspeed, hipRspeed, kneeLspeed, kneeRspeed) then Go_Down
                                | abs(main_x) <. 0.8 then Center
                        
                   
                end;

               
                (* control the arm *)

                automaton
                    state Normal
                        do
                            (arm1speed, arm2speed, arm3speed, arm4speed) =
                                setMotorArm(arm1angle, arm2angle, arm3angle, arm4angle, 320.0, 30.0 , 80.0, 80.0);
                        until false -> not pre action_b and action_b then Move
                    state Move
                        var theta1 : float; theta2 : float; theta3 : float; theta4 : float;
                        do
                            (theta1, theta2, theta3, theta4) = arm_ik (arm_target_x, arm_target_y ,arm_target_angle, arm1angle, arm2angle, arm3angle, arm4angle, 0.26, 0.26, 0.26, 0.3);
                            (arm1speed, arm2speed, arm3speed, arm4speed) =
                                setMotorArm(arm1angle, arm2angle, arm3angle, arm4angle, theta1, theta2 , theta3, theta4);
                        until false -> not pre action_b and action_b then Normal
                end;


            until gyroscope >=. 90.0 and gyroscope <=. 260.0 then Upside_Down_Init
                | action_a and hipLangle >=. 180.0 and hipRangle <=. 180.0 then Jump
    end;
tel
